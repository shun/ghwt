# AI-Driven Development Rules - Commit Message Format
# Version: 1.0
# Description: Rules for generating consistent commit messages.

# Commit Message Structure
commit_message_format:
  template: |
    {{タイトル}}
    **対応内容**
    - {{対応内容1}}
    - {{対応内容2}}

    **備考**
    - {{備考1}}
    - {{備考2}}
  generation_rules:
    summary:
      source: "AIによる自動要約"
      instruction: "ステージングされたファイルの変更内容を分析し、1行の簡潔な概要を生成する。"
    details:
      granularity: "機能・ロジック単位の変更点"
      instruction: "具体的な関数名やロジックの変更点を記述する。"
      example: "user_authentication.rs: login関数のエラーハンドリングを改善"
    remarks:
      presence: "任意"
      instruction: "特筆すべき事項があれば記述する。なければセクションごと省略する。"

  examples:
    - |
      APIタイムアウト処理を追加
      **対応内容**
      - api/client.rs: retry ロジックを追加
      - タイムアウト値を設定

      **備考**
      - issue #1234

# Rule Application
# This rule will be applied by the AI assistant when generating commit messages.
# The AI will analyze staged changes and populate the template accordingly.

# Commit Execution
# コミット実行方法に関するルール
commit_execution:
  method: "inline"
  description: "`git commit -m \"<multi-line message>\"` を使用して改行込みのメッセージを直接渡してコミットする。"
  procedure:
    - "1. AIが生成したコミットメッセージをシェルエスケープに注意しつつ `git commit -m` の引数として渡す。"
    - "2. ファイルを作成せずにコミットが完了することを確認する。"
  example_command: |
    git commit -m "{{タイトル}}
    **対応内容**
    - {{対応内容1}}
    - {{対応内容2}}

    **備考**
    - {{備考1}}
    - {{備考2}}
    "
