# AI-Driven Development Rules - Issue Execution
# Version: 2.2
# Description: Rules for executing tasks from a specified GitHub Issue number with automated branch management, human review process, and PR creation workflow.

# Introduction
# 本ルールは、指定されたGitHub Issue番号に基づいて、そのIssueに定義されたタスクを効率的に実行するプロセスを支援することを目的とします。
# AIは指定されたIssueの内容を理解し、自動的にブランチを作成し、タスクリストに従って作業を実行し、人間のレビューを経てからコミット・PRを作成してIssueの完了を目指します。

# 1. Issue Task Execution Management
# ----------------------------------
issue_task_execution:
  issue_identification:
    input_format: "GitHub Issue番号（例：#123、123、issue-123など）"
    rule: "AIは指定されたIssue番号から該当するIssueの内容を取得し、タスクリストと完了の定義を理解する。"
    note: "Issue番号が不明確な場合は、明確化のための質問を行う。"

  automated_workflow:
    branch_management:
      rule: "Issue実行開始時に自動的にブランチを作成する"
      naming_convention: "feature/issue-{issue_number}-{sanitized_title}"
      example: "feature/issue-123-cli-interface-specification"
      base_branch: "main"
      
    human_review_process:
      rule: "全タスク完了後、コミット前に必ず人間のレビューを求める"
      review_request_format: |
        ## 🔍 レビュー依頼
        
        Issue #{issue_number} の作業が完了しました。
        以下の内容をレビューしていただき、問題がなければ「レビューOK」とお答えください。
        
        ### 📋 完了したタスク
        {completed_tasks_list}
        
        ### 📝 変更内容
        {changes_summary}
        
        ### 📁 変更されたファイル
        {modified_files_list}
        
        レビューをお願いします。
      
    commit_and_pr_creation:
      rule: "人間から「レビューOK」を受けた後にコミット・PR作成を実行する"
      commit_strategy:
        - "git add で変更ファイルを確実にステージング"
        - "コミットメッセージを/tmpの一時ファイルに作成"
        - "git commit -F オプションで一時ファイルを使用"
        - "一時ファイルは/tmpディレクトリに作成"
      commit_message_format: |
        {issue_title}
        
        - {implementation_item_1}
        - {implementation_item_2}
        
        備考
        - {note_1}
        - {note_2}
      commit_message_rules:
        - "タイトルはIssueのタイトルをそのまま使用"
        - "対応内容は具体的な実装内容を箇条書きで記載"
        - "備考がない場合は「備考」セクションを表示しない"
        - "各項目は「- 」で始める"
        - "git commit -F オプションで一時ファイルを使用"
      temporary_files:
        location: "/tmp"
        naming_pattern: "/tmp/ghwt-{operation}-{timestamp}.txt"
        cleanup: "操作完了後に自動削除"
       
    pull_request_creation:
      rule: "コミット後に自動的にPull Requestを作成する"
      title_format: "#{issue_number}: {issue_title}"
      body_template: |
        ## 📋 Issue #{issue_number} の実装
        
        ### 🎯 概要
        {issue_summary}
        
        ### ✅ 完了したタスク
        {completed_tasks_list}
        
        ### 📝 変更内容
        {changes_summary}
        
        ### 🔗 関連Issue
        Closes #{issue_number}
      pr_creation_strategy:
        - "ブランチを必ずリモートにプッシュしてからPR作成"
        - "PR本文は一時ファイル（/tmp）を使用"
        - "改行文字を含むコマンドは--body-fileオプションで回避"
      
    issue_completion:
      checkbox_update:
        rule: "各タスク完了時に自動的にIssue本文のチェックボックスを更新する"
        method: "GitHub APIまたはGH CLIを使用してIssue本文を更新"
        
      completion_comment:
        rule: "PR作成後に完了報告コメントを自動追加する"
        template: |
          ## ✅ Issue #{issue_number} 完了報告
          
          **{issue_title}** が正常に完了いたしました。
          
          ### 🎉 完了した成果物
          {deliverables_list}
          
          ### 📋 実装内容
          {implementation_summary}
          
          ### 🔗 Pull Request
          #{pr_number}
        comment_strategy:
          - "コメント本文は一時ファイル（/tmp）を使用"
          - "--body-fileオプションで改行文字問題を回避"
          
      auto_close:
        rule: "PR作成後、人間の確認を経てIssueを自動クローズする"
        condition: "全てのタスクが完了し、PRが作成されている場合"

  issue_content_analysis:
    required_sections:
      - name: "🎯 概要 (Overview)"
        purpose: "Issueの目的と背景を理解し、作業の方向性を把握する"
      - name: "📝 タスクリスト (Tasks)"
        purpose: "実行すべき具体的なタスクと並列実行可能性を把握する"
      - name: "✅ 完了の定義 (Definition of Done)"
        purpose: "作業完了の基準を明確に理解する"
      - name: "🛠️ 使用ツール (Development Tools)"
        purpose: "推奨される開発ツールを確認する"
    
    analysis_process:
      - step: "Issue内容の構造化理解"
        action: "AIはIssueの各セクションを解析し、作業の全体像を把握する"
      - step: "タスクの依存関係分析"
        action: "各タスクの依存関係と並列実行可能性を分析する（✨、➡️絵文字を参考）"
      - step: "技術的要件の抽出"
        action: "使用技術、制約事項、前提条件を整理する"

  task_execution_strategy:
    parallel_execution_priority:
      rule: "✨マークが付いたタスクは最優先で並列実行を検討する"
      approach: "複数のタスクを同時に進行し、開発効率を最大化する"
      
    sequential_execution_handling:
      rule: "➡️マークが付いたタスクは依存関係を尊重し、適切な順序で実行する"
      approach: "先行タスクの完了を確認してから次のタスクに進む"

    task_status_management:
      format: "チェックボックス (`- [x]`) でタスクの完了状況を管理する"
      update_frequency: "各タスク完了時に即座に更新する"
      progress_reporting: "定期的に進捗状況を人間に報告する"
      auto_update: "GitHub APIを使用してIssue本文のチェックボックスを自動更新する"

  execution_process:
    steps:
      - step_id: "E0"
        title: "Issue取得の確実な実行"
        actors: ["AI"]
        action: "複数の方法でIssue内容を確実に取得する"
        commands:
          - "gh issue view {issue_number} | cat"
          - "gh issue view {issue_number} --json title,body,labels,state"
          - "curl -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}"
        fallback_actions:
          - "PAGERの問題がある場合は | cat を追加"
          - "GitHub CLIが失敗した場合はAPIを直接使用"
          - "認証エラーの場合は認証状態を確認"
        key_inputs: ["Issue番号"]
        key_outputs: ["Issue詳細情報"]
        
      - step_id: "E1"
        title: "ブランチ作成と作業環境準備"
        actors: ["AI"]
        action: "Issue番号とタイトルに基づいてブランチを作成し、作業環境を準備する"
        commands:
          - "git checkout -b feature/issue-{issue_number}-{sanitized_title}"
          - "git push -u origin feature/issue-{issue_number}-{sanitized_title}"
        key_inputs: ["Issue番号", "Issueタイトル"]
        key_outputs: ["作業ブランチ"]
        
      - step_id: "E2"
        title: "タスク分析と実行計画策定"
        actors: ["AI"]
        action: "取得したIssue内容を分析し、タスクの優先度、依存関係、並列実行可能性を考慮した実行計画を策定する"
        key_inputs: ["Issue詳細情報"]
        key_outputs: ["実行計画", "タスク依存関係マップ"]
        
      - step_id: "E3"
        title: "実行計画の提示と即座実行開始"
        actors: ["AI"]
        action: "AIが策定した実行計画を提示し、即座に実行を開始する。人間の承認を待たずに標準的なタスクは自動実行する"
        key_inputs: ["実行計画", "タスク依存関係マップ"]
        key_outputs: ["実行中の計画"]
        
      - step_id: "E4"
        title: "タスク実行（並列・逐次）とリアルタイム更新"
        actors: ["AI"]
        action: "実行計画に従い、タスクを実行する。各タスク完了時にチェックボックスを自動更新し、進捗を可視化する"
        key_inputs: ["実行計画"]
        key_outputs: ["実行結果", "更新されたタスクリスト", "変更されたファイル"]
        automation:
          - "タスク完了時のチェックボックス自動更新"
          - "進捗コメントの自動追加"
          - "変更内容の記録"
        
      - step_id: "E5"
        title: "人間レビューの依頼"
        actors: ["AI"]
        action: "全タスク完了後、変更内容を整理して人間にレビューを依頼する"
        key_inputs: ["完了したタスクリスト", "変更内容", "変更されたファイル"]
        key_outputs: ["レビュー依頼"]
        wait_condition: "人間から「レビューOK」の回答を待つ"
        
      - step_id: "E6"
        title: "コミット実行"
        actors: ["AI"]
        action: "人間のレビューOK後、指定されたフォーマットでコミットを実行する"
        key_inputs: ["レビューOK確認", "変更内容"]
        key_outputs: ["コミット"]
        trigger: "人間から「レビューOK」を受信した場合のみ"
        commit_execution_steps:
          - "git add で変更ファイルをステージング"
          - "コミットメッセージを/tmpの一時ファイルに作成"
          - "git commit -F [temp_file_path] でコミット実行"
          - "一時ファイルを削除"
        commit_message_generation:
          title: "Issueのタイトルをそのまま使用"
          implementation_items: "具体的な実装内容を箇条書きで記載"
          notes: "備考がある場合のみ記載（ない場合は省略）"
          format_example: 'git commit -F /tmp/ghwt-commit-message-{timestamp}.txt'
        
      - step_id: "E7"
        title: "Pull Request作成と完了報告"
        actors: ["AI"]
        action: "コミット後、自動的にPull Requestを作成し、完了報告を行う"
        key_inputs: ["コミット完了", "変更内容"]
        key_outputs: ["Pull Request", "完了報告コメント"]
        pr_creation_steps:
          - "ブランチをリモートにプッシュ（git push -u origin ブランチ名）"
          - "PR本文を/tmpの一時ファイルに作成"
          - "gh pr create --body-fileオプションでPR作成"
          - "一時ファイルを削除"
        comment_creation_steps:
          - "完了報告コメントを/tmpの一時ファイルに作成"
          - "gh issue comment --body-fileオプションでコメント追加"
          - "一時ファイルを削除"
        automation:
          - "PR作成の自動化"
          - "Issue完了コメントの自動追加"
          - "関連Issueのリンク設定"
          - "一時ファイルの自動クリーンアップ"
        
      - step_id: "E8"
        title: "Issue自動クローズ（オプション）"
        actors: ["AI", "人間"]
        action: "PRが作成され、全ての完了条件を満たしている場合、Issueを自動クローズする"
        key_inputs: ["完了確認", "PR作成確認"]
        key_outputs: ["クローズされたIssue"]
        condition: "auto_close設定が有効な場合のみ"

  error_handling:
    issue_retrieval_failure:
      condition: "Issue取得に失敗した場合"
      actions:
        - "PAGERの問題: コマンドに | cat を追加"
        - "認証エラー: gh auth status で認証状態確認"
        - "ネットワークエラー: 再試行またはAPI直接使用"
        - "Issue不存在: Issue番号の再確認を求める"
      
    branch_creation_failure:
      condition: "ブランチ作成に失敗した場合"
      action: "既存ブランチの確認を行い、適切な名前で再作成を試行する"
      
    missing_issue:
      condition: "指定されたIssue番号が存在しない場合"
      action: "エラーメッセージを表示し、正しいIssue番号の確認を求める"
      
    incomplete_issue_structure:
      condition: "Issueが必要なセクションを含んでいない場合"
      action: "不足しているセクションを特定し、可能な範囲で推測して実行を継続する"
      
    task_execution_failure:
      condition: "タスク実行中にエラーが発生した場合"
      action: "エラー内容を分析し、解決策を提案する。必要に応じて人間の支援を求める"
      
    commit_failure:
      condition: "コミット実行に失敗した場合"
      actions:
        - "ステージングエリアの確認: git status"
        - "変更ファイルの再ステージング: git add ."
        - "コミットメッセージを一時ファイルに再作成"
        - "git commit -F オプションで再実行"
        - "一時ファイルの権限・内容確認"
      
    review_timeout:
      condition: "人間のレビューが長時間得られない場合"
      action: "レビュー依頼を再送し、緊急度を伝える"
      
    pr_creation_failure:
      condition: "Pull Request作成に失敗した場合"
      actions:
        - "ブランチのリモートプッシュ確認"
        - "一時ファイルを使用したPR本文作成"
        - "--body-fileオプションの使用"
        - "エラー原因の分析と手動手順の提示"
        
    temporary_file_failure:
      condition: "一時ファイル作成・操作に失敗した場合"
      actions:
        - "/tmpディレクトリの書き込み権限確認"
        - "代替の一時ディレクトリ使用"
        - "ファイル名の重複回避（タイムスタンプ使用）"

  communication_guidelines:
    progress_updates:
      frequency: "各タスク完了時、または重要な進捗があった時"
      format: "タスク名、完了状況、次のステップを明記"
      automation: "チェックボックス更新と同時に進捗コメントを自動追加"
      
    review_request:
      timing: "全タスク完了時"
      format: "変更内容の要約、完了したタスク、変更されたファイルを明記"
      wait_behavior: "人間からの「レビューOK」を待機"
      
    problem_reporting:
      timing: "問題発生時は即座に報告"
      content: "問題の詳細、影響範囲、提案する解決策"
      
    completion_notification:
      timing: "PR作成後"
      content: "完了したタスクの要約、達成された成果、PR情報"
      automation: "完了報告コメントの自動生成と投稿"

  quality_assurance:
    task_verification:
      rule: "各タスク完了時に、完了の定義に照らして品質を確認する"
      method: "自動テスト、手動確認、コードレビューなど適切な方法を選択"
      
    human_review_requirement:
      rule: "コミット前に必ず人間のレビューを受ける"
      scope: "変更内容、実装品質、完了条件の達成度"
      timing: "全タスク完了時"
      format: "変更内容の要約、完了したタスク、変更されたファイルを明記"
      wait_behavior: "人間からの「レビューOK」を待機"
      
    documentation_update:
      rule: "関連するドキュメントが存在する場合は、変更に応じて更新する"
      scope: "README、API仕様書、ユーザーガイドなど"
      
    code_quality:
      rule: "コード変更を伴う場合は、プロジェクトのコーディング規約に従う"
      tools: "リンター、フォーマッター、静的解析ツールを活用"

# 2. Integration with Development Tools
# ------------------------------------
development_tools_integration:
  primary_tools: ["Cursor", "Windsurf", "GitHub CLI", "Git"]
  
  github_cli_usage:
    issue_retrieval: 
      primary: "gh issue view [issue_number] | cat"
      fallback: "gh issue view [issue_number] --json title,body,labels,state"
      api_fallback: "curl -H 'Accept: application/vnd.github.v3+json' https://api.github.com/repos/{owner}/{repo}/issues/{issue_number}"
    issue_update: "gh issue edit [issue_number] --body [updated_body]"
    issue_comment: "gh issue comment [issue_number] --body-file [temp_file_path]"
    issue_close: "gh issue close [issue_number] --comment [completion_message]"
    pr_creation: "gh pr create --title [title] --body-file [temp_file_path] --base main --head [branch]"
    pr_creation_rules:
      - "PRのタイトルとボディは必ず一時ファイルを使用"
      - "改行文字を含む場合は--body-fileオプションを使用"
      - "一時ファイルは/tmp/ghwt-pr-body-{timestamp}.txtに作成"
      - "PR作成後に一時ファイルを削除"
      - "コマンドライン引数での--bodyオプションは使用禁止"
    
  git_workflow:
    branch_creation: "git checkout -b feature/issue-{issue_number}-{sanitized_title}"
    branch_push: "git push -u origin feature/issue-{issue_number}-{sanitized_title}"
    commit_strategy: "人間のレビューOK後に一括コミット"
    commit_execution:
      staging: "git add [changed_files]"
      commit_command: 'git commit -F [temp_file_path]'
      notes_handling: "備考がある場合のみ一時ファイルに含める"
      temp_file_creation: "コミットメッセージを/tmpの一時ファイルに作成"
    commit_message_format: |
      {issue_title}
      
      - {implementation_item_1}
      - {implementation_item_2}
      
      備考
      - {note_1}
      - {note_2}
    commit_message_rules:
      - "備考がない場合は「備考」セクションを省略"
      - "各項目は「- 」で始める"
      - "具体的な実装内容を記載"
      - "git commit -F オプションで一時ファイル使用"
    
  temporary_file_management:
    base_directory: "/tmp"
    naming_convention: "ghwt-{operation}-{timestamp}.txt"
    operations:
      pr_body: "/tmp/ghwt-pr-body-{timestamp}.txt"
      issue_comment: "/tmp/ghwt-issue-comment-{timestamp}.txt"
      commit_message: "/tmp/ghwt-commit-message-{timestamp}.txt"
    cleanup_policy: "操作完了後に即座に削除"
    pr_creation_workflow:
      step1: "PR本文を一時ファイルに書き込み"
      step2: "gh pr create --title [title] --body-file [temp_file] を実行"
      step3: "PR作成成功後に一時ファイルを削除"
      step4: "エラー時も一時ファイルをクリーンアップ"
      mandatory_usage: "改行を含むPR本文は必ず一時ファイル経由で作成"
    
  cursor_windsurf_integration:
    parallel_development: "複数のファイルやコンポーネントを同時に編集"
    ai_assistance: "コード生成、リファクタリング、テスト作成の支援"
    
  version_control:
    branch_strategy: "Issue番号を含むブランチ名を使用（例：feature/issue-123-cli-interface-spec）"
    commit_message: "指定されたフォーマットに従ったコミットメッセージ"
    pull_request: "Issue番号を参照するPull Requestを自動作成"

# 3. Automation Settings
# ----------------------
automation_settings:
  auto_branch_creation:
    enabled: true
    naming_pattern: "feature/issue-{issue_number}-{sanitized_title}"
    
  auto_checkbox_update:
    enabled: true
    update_method: "github_api"
    
  human_review_requirement:
    enabled: true
    wait_for_approval: true
    approval_keywords: ["レビューOK", "LGTM", "Approved", "OK"]
    
  auto_commit_after_review:
    enabled: true
    trigger: "human_review_approval"
    commit_method: "temp_file_with_F_option"
    
  auto_pr_creation:
    enabled: true
    draft_mode: false
    auto_assign_reviewers: false
    trigger: "after_commit"
    method: "body_file_option"
    implementation_rules:
      - "PR本文は必ず一時ファイルに作成"
      - "gh pr create --body-file オプションを使用"
      - "コマンドライン引数での--bodyは使用禁止"
      - "改行文字の問題を回避するため一時ファイル必須"
      - "作成後に一時ファイルを自動削除"
    
  auto_issue_close:
    enabled: false  # デフォルトは無効、人間の確認を推奨
    condition: "all_tasks_completed_and_pr_created"
    
  progress_reporting:
    auto_comment: true
    frequency: "per_task_completion"
    
  temporary_file_management:
    auto_create: true
    auto_cleanup: true
    location: "/tmp"

# 4. Collaboration Patterns
# -------------------------
collaboration_patterns:
  ai_human_roles:
    ai_responsibilities:
      - "Issue内容の解析と理解"
      - "ブランチ作成と作業環境準備"
      - "タスクの実行計画策定と即座実行"
      - "コード実装とテスト"
      - "チェックボックスの自動更新"
      - "レビュー依頼の作成"
      - "レビューOK後のコミット・PR作成"
      - "進捗状況の追跡と報告"
      - "技術的問題の初期分析"
      - "一時ファイルの管理とクリーンアップ"
      - "PR作成時の一時ファイル使用による改行問題の回避"
      
    human_responsibilities:
      - "作業完了後の品質レビュー"
      - "レビューOKの判断"
      - "Pull Requestのレビューと承認"
      - "技術的判断の最終決定（必要時）"
      - "Issue完了の最終承認"
      - "複雑な問題の解決支援"
      
  decision_making:
    autonomous_decisions:
      - "標準的なコーディングパターンの選択"
      - "既存コードスタイルに従った実装"
      - "明確に定義されたタスクの実行方法"
      - "ブランチ作成とチェックボックス更新"
      - "一時ファイルの作成・削除"
      - "コミット・PR作成の技術的手法"
      - "PR作成時の一時ファイル使用判断（改行を含む場合は必須）"
      
    collaborative_decisions:
      - "作業完了の品質確認（必須レビュー）"
      - "コミット・PR作成の最終判断"
      - "アーキテクチャの重要な変更"
      - "新しい依存関係の追加"
      - "パフォーマンスに影響する実装選択"
      - "セキュリティに関わる実装"

# 5. Success Metrics
# ------------------
success_metrics:
  issue_retrieval_success:
    measure: "Issue取得の成功率"
    target: "100%（確実にIssue内容を取得）"
    
  task_completion:
    measure: "完了したタスクの割合"
    target: "100%（すべてのタスクが完了）"
    
  quality_compliance:
    measure: "完了の定義への準拠度"
    target: "100%（すべての完了基準を満たす）"
    
  commit_success_rate:
    measure: "コミット実行の成功率"
    target: "100%（改行文字問題やステージング問題の解決）"
    
  pr_creation_success_rate:
    measure: "Pull Request作成の成功率"
    target: "100%（一時ファイル使用による確実な作成）"
    
  review_process_effectiveness:
    measure: "人間レビューによる品質向上"
    target: "レビューによる問題発見・修正の実施"
    
  efficiency:
    measure: "並列実行によるタスク完了時間の短縮"
    target: "逐次実行と比較して30%以上の時間短縮"
    
  automation_effectiveness:
    measure: "手動介入が必要だった作業の割合（レビューを除く）"
    target: "10%以下（90%以上の作業が自動化）"
    
  collaboration_effectiveness:
    measure: "AI-人間間のコミュニケーション品質"
    target: "明確で建設的なやり取り、問題の迅速な解決" 