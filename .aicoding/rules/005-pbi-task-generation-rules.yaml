# .aicoding/rules/pbi_task_generation_rules.yaml
# PBIからのタスク自動生成ルール (改訂版)

# 目的
purpose: >
  このルールは、プロダクトバックログアイテム（PBI）が与えられた際に、
  開発者が迷わずに作業を進められるよう、超具体的かつ実行可能なタスクリストを
  生成することを目的とします。特に、新人開発者が作業内容を明確に理解し、
  自律的にタスクを遂行できるよう支援します。

# 対象となるPBIの前提構造
pbi_structure:
  description: >
    このルールは、PBIが以下の主要セクションを含むことを前提とします。
    PBIに既に「タスクリスト」が含まれている場合は、それを尊重しつつ、
    このルールに基づいて補完・詳細化を行います。
  sections:
    - title: タイトル
      description: PBIの主題を簡潔に表す。
    - title: 説明 (Description)
      description: PBIの背景、目的、概要を記述する。
    - title: 受け入れ基準 (Acceptance Criteria)
      description: PBIが完了したと判断するための具体的な条件を箇条書きで列挙する。

# タスク生成の基本方針
task_generation_principles:
  - principle: 入力情報
    detail: 主にPBIの「説明」と「受け入れ基準」を分析し、タスクを抽出・生成します。
  - principle: 粒度
    detail: 各タスクは、15分〜30分程度で完了できる程度の作業量を目安に分割します。より大きな作業は複数のサブタスクに分割します。
  - principle: 超具体性
    detail: >
      各タスクには、実行すべき具体的なアクションを、新人開発者でも迷わずに実装に着手できるレベルまで詳細な日本語の文章で指示します。
      これには、実装すべきロジック、アルゴリズム、使用するAPI、期待される動作などが含まれます。
      具体的なコードスニペットをタスク説明の主体とするのではなく、あくまで詳細な文章による指示を基本とします。
      既存ファイルへの追記・修正の場合、変更点を明確にするために `diff` 形式で差分イメージを提示することは有効ですが、これも主要な指示は文章で行うことを補完するものとします。
      例:「〜コマンドを実行する」「〜ファイルを作成し、[詳細な仕様やロジックの説明] に基づいて内容を記述する」「〜関数の[具体的な振る舞い]を確認する」。
  - principle: 網羅性
    detail: 「受け入れ基準」をすべて満たすために必要な作業がタスクとして網羅されるようにします。
  - principle: 順序性
    detail: 可能であれば、タスク間の依存関係を考慮し、実行順序が自然になるように並べます。
  - principle: ドキュメンテーション
    detail: 設定ファイルの作成、コードの変更、重要な決定事項などについては、関連ドキュメント（README、CONTRIBUTINGガイドなど）への追記・更新タスクも必要に応じて含め、変更箇所は `diff` 形式で指示します。
  - principle: 開発アプローチ
    detail: >
      テスト駆動開発（TDD）またはそれに類するテストファーストのアプローチを推奨します。
      これは `/docs/004-testing/test-strategy.md` に定義されたテスト戦略に準拠します。
      機能実装タスクには、対応するテスト作成タスクを先行させるか、実装とテストを密接に連携させた小さなサイクルで進めるようにタスクを構成します。

# タスクリストのフォーマット
task_list_format:
  description: |
    生成されるタスクリストは、以下のMarkdown形式に従います。
    ファイルの冒頭には、関連するPBIのヘッダー情報（PBI ID、タイトル、説明、受け入れ基準）を記述することを推奨します。
    これにより、タスクリストのコンテキストが明確になります。
    タスク内容を説明する際、コード例や差分イメージ (diff) を示すことがありますが、これらはあくまで参考情報または変更点の視覚的表現であり、主要な実装指示は詳細な日本語の文章で行うことを基本とします。
  markdown_example: |
    ---
    **PBI-XXX: [PBIタイトル]**

    - **説明:** [PBIの説明]
    - **受け入れ基準:**
        - [基準1]
        - [基準2]
    ---

    **タスクリスト:**

    - [ ] **タスク1: [新規ファイル作成タスクの概要]**
        - [ ] 1.1. [ファイル作成の詳細]
            - **作成ファイル:** `path/to/new_file.ext`
            - **内容:** |
              ```[language]
              // new file content
              ```
    - [ ] **タスク2: [既存ファイル修正タスクの概要]**
        - [ ] 2.1. [ファイル修正の詳細]
            - **対象ファイル:** `path/to/existing_file.ext`
            - **変更箇所:** [変更箇所の説明、例: X行目に追記、Y行目を修正]
            - **差分イメージ:** |
              ```diff
              - old_content_line_1
              - old_content_line_2
              + new_content_line_1
              + new_content_line_2
              ```
        - [ ] 2.2. [別のファイル修正の詳細]
            - **対象ファイル:** `path/to/another_file.ext`
            - **変更箇所:** [変更箇所の説明]
            - **差分イメージ:** |
              ```diff
              + new_line_to_add_at_specific_location
              ```
    - [ ] **タスク3: [コマンド実行と確認タスクの概要]**
        - [ ] 3.1. [コマンド実行]
            - **コマンド:** `your_command --with --options`
        - [ ] 3.2. [実行結果の確認]
            - **確認事項:** [期待される出力や状態]
    - [ ] **タスク4: [コミットタスク]**
        - [ ] 4.1. 変更をGitにコミットする。
            - **コミットメッセージ例:** `feat: Implement new feature as per PBI-XXX`

# タスク生成の詳細ルール
detailed_task_generation_rules:
  - category: 環境設定・ツール導入に関するタスク
    trigger: PBIの「説明」や「受け入れ基準」に、特定のツール、ライブラリ、フレームワークの導入、設定、バージョン指定に関する記述がある場合。
    example_tasks:
      - タスク: ツールのインストールコマンドの提示。
        詳細: `rustup component add rustfmt` を実行する。
      - タスク: 設定ファイルの作成。
        詳細: プロジェクトルートに `rustfmt.toml` を作成し、以下の内容を記述する。
        markdown_code_block: |
          ```toml
          # rustfmt.toml content
          max_width = 100
          ```
      - タスク: 既存設定ファイルへの追記・修正。
        詳細: "`Cargo.toml` の `[package]` セクションを以下のように修正する。"
        対象ファイル: "`Cargo.toml`"
        差分イメージ: |
          ```diff
          [package]
          name = "ghwt"
          version = "0.1.0"
          - edition = "2021"
          + edition = "2024"
          ```
  - category: コード実装・変更に関するタスク
    trigger: PBIの「説明」や「受け入れ基準」に、特定の機能実装、既存コードの修正、リファクタリングに関する記述がある場合。
    example_tasks:
      - タスク: 新規モジュールの作成。
        詳細: "`src/new_module.rs` を作成し、以下の初期コードを記述する。"
        作成ファイル: "`src/new_module.rs`"
        内容: |
          ```rust
          // Initial content for new_module.rs
          pub fn hello() {
              println!("Hello from new_module!");
          }
          ```
      - タスク: 既存関数の修正。
        詳細: "`src/main.rs` の `main` 関数を以下のように修正する。"
        対象ファイル: "`src/main.rs`"
        差分イメージ: |
          ```diff
          fn main() {
          -    println!("Old message");
          +    println!("New, updated message");
          +    // Add more logic here
          }
          ```
  - category: ドキュメント作成・更新に関するタスク
    trigger: >
      PBIの「説明」や「受け入れ基準」に、ドキュメント（README、CONTRIBUTINGなど）の
      新規作成や更新に関する記述がある場合。または、他のタスクの結果としてドキュメント更新が必要な場合。
    example_tasks:
      - タスク: "`README-ja.md` にバッジを追加。"
        詳細: "`README-ja.md` の2行目にRustバージョンバッジを追記する。"
        対象ファイル: "`README-ja.md`"
        変更箇所: 2行目
        差分イメージ: |
          ```diff
          - [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
          + [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Rust Version](https://img.shields.io/badge/rust-1.87.0-orange.svg)](https://www.rust-lang.org)
          ```
  - category: CI/CDパイプライン設定に関するタスク
    trigger: >
      PBIの「説明」や「受け入れ基準」に、CI/CDパイプラインの構築、ジョブの追加・変更に関する記述がある場合。
    example_tasks:
      - タスク: GitHub Actionsワークフローファイルの作成。
        詳細: "`.github/workflows/rust.yml` を作成し、以下の内容を記述する。"
        作成ファイル: "`.github/workflows/rust.yml`"
        内容: |
          ```yaml
          name: Rust CI
          # (以下、ワークフロー内容)
          ```
      - タスク: 既存ワークフローファイルの修正。
        詳細: "`.github/workflows/rust.yml` のRustバージョンを更新する。"
        対象ファイル: "`.github/workflows/rust.yml`"
        差分イメージ: |
          ```diff
          env:
            CARGO_TERM_COLOR: always
          -  RUST_VERSION: 1.86.0
          +  RUST_VERSION: 1.87.0
          ```
  - category: コミット・バージョン管理に関するタスク
    trigger: 各主要な作業単位の完了時。
    example_tasks:
      - タスク: 変更をGitにコミットする。
        詳細: "コミットメッセージ `docs: Add Rust version badge to README-ja.md` でコミットする。"
  - category: 確認・テストに関するタスク
    trigger: >
      PBIの「受け入れ基準」の定義時、各機能実装・設定変更の着手前または完了時。
      `/docs/004-testing/test-strategy.md` に基づくTDDのアプローチに従い、実装タスクに先行してテストケースを定義・作成する場合も含む。
    example_tasks:
      - タスク: フォーマットチェックの実行。
        詳細: "`cargo fmt --check` を実行し、エラーが出ないことを確認する。"
      - タスク: リンターチェックの実行。
        詳細: "`cargo clippy -- -D warnings` を実行し、エラーや警告がないことを確認する。"
      - タスク: "[機能名] の単体テストケース設計とスタブ作成"
        詳細: >
          [機能名] 関数のための単体テストケースを設計し、テストスタブを作成する。
          テストは対象となる機能が実装されているソースファイル（例: `src/[module_name].rs`）と
          同じファイル内の `#[cfg(test)] mod tests { ... }` モジュールに記述する。
          テスト関数名は `test_[function_name]_[scenario]` のように、テスト対象と内容がわかるように命名する。
        作成場所: "`src/[module_name].rs` (同ファイル内のテストモジュール内)"
        確認事項: "テストスタブ (`fn test_...() { unimplemented!(); }`) が作成されていること。"
      - タスク: "[機能/PBI名] の統合テストケース設計とスタブ作成"
        詳細: >
          [機能/PBI名] のための統合テストケースを設計し、テストスタブを作成する。
          テストファイルはプロジェクトルート直下の `tests/` ディレクトリ配下に、
          テスト対象の機能やモジュール名がわかるような名前（例: `[feature_or_module_name]_test.rs` または `integration_[feature_name]_test.rs`）で作成する。
        作成ファイル: "`tests/[feature_or_module_name]_test.rs`"
        内容: |
            ```rust
            // 例: tests/config_loading_test.rs
            // 必要な use 文 (例: use super::*, use crate::module::*)
    
            #[test]
            fn test_[scenario_description]() {
                // 準備 (arrange)
                // 実行 (act)
                // 検証 (assert)
                unimplemented!();
            }
            ```
        確認事項: "`tests/` ディレクトリ以下にテストファイルとテストスタブが作成されていること。"

# ルールの適用例
application_example: >
  提示された `PBI-INFRA-001` や `PBI-INFRA-002` のようなPBIが与えられた場合、
  この改訂ルールに基づいて、それらのPBI内に記述されているような、より具体的で
  `diff` 形式の指示を含む詳細なタスクリストが生成されることを目指します。

# 不明確な点がある場合の対話ルール
interaction_rules_for_ambiguity:
  description: >
    タスクを作成する際にPBIの内容に不明確な点や曖昧さがあり、
    超具体的なタスク定義が困難な場合、以下の対話ルールに従ってユーザーに確認を行います。
  process:
    - step: 1. 不明点の特定とタスク作成保留
      detail: >
        PBIの記述から超具体的なタスク（例: diff形式での指示が可能なレベル）を
        一意に定義できない場合、タスクの自動生成を一旦保留します。
    - step: 2. 一問一答形式での質問
      detail: >
        不明点を解消するため、ユーザーに対して一問一答形式で質問を行います。
    - step: 3. 質問の形式
      detail: >
        質問する際には、以下の情報を含めます。
        - **質問の背景:** なぜこの質問が必要なのか、どの情報が不足しているのか、
          PBIのどの部分の解釈に迷っているのかを具体的に説明します。
        - **3つ以上の提案:** 想定される解釈、解決策、またはタスクの具体化の方向性について、
          具体的な選択肢を3つ以上提示します。これにより、ユーザーがより的確な指示を
          出しやすくなることを目指します。
    - step: 4. 反復的な明確化
      detail: >
        ユーザーからの回答に基づき、タスクが超具体的に定義できるまで、
        必要に応じて質問と明確化のプロセスを繰り返します。
        すべての不明点が解消され次第、タスク作成を再開します。
    - step: 5. タスク作成の再開
      detail: >
        不明点が解消され、タスクが超具体的に定義できるようになった時点で、
        タスクの作成を再開します。

# 今後の改善
future_improvements:
  description: >
    このルールは、運用を通じて得られたフィードバックを元に、継続的に改善していきます。
  points:
    - より多様な種類のPBIへの対応。
    - タスク分割の最適化。
    - 生成されるタスクの質の向上。
    - プロジェクト固有の規約や前提条件の取り込み。
